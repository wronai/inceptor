[tool.poetry]
name = "inceptor"
version = "0.1.3"
description = "Multi-Level Solution Architecture Generator powered by Ollama Mistral:7b"
authors = ["Tom Sapletta <info@softreck.dev>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/wronai/inceptor"
repository = "https://github.com/wronai/inceptor"
documentation = "https://wronai.github.io/inceptor"
keywords = ["ai", "architecture", "llm", "ollama", "solution-generator", "mistral"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "inceptor", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
requests = "^2.31.0"
pydantic = "^2.5.0"
click = "^8.1.7"
rich = "^13.7.0"
pyyaml = "^6.0.1"
tabulate = "^0.9.0"
jinja2 = "^3.1.2"
pathlib = "^1.0.1"
dataclasses-json = "^0.6.3"
typing-extensions = "^4.8.0"
python-dotenv = "^1.0.0"
python-multipart = "^0.0.6"
fastapi = {version = "^0.104.0", optional = true}
uvicorn = {version = "^0.24.0", optional = true}
mkdocs-material = {extras = ["imaging"], version = "^9.6.14"}
mkdocs-material-extensions = "^1.3.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
isort = "^5.12.0"
pre-commit = "^3.6.0"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
jupyterlab = "^4.0.9"
ipython = "^8.17.2"

[tool.poetry.group.test.dependencies]
pytest-asyncio = "^0.21.1"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
responses = "^0.24.1"
factory-boy = "^3.3.0"
faker = "^20.1.0"
freezegun = "^1.2.2"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocstrings = {extras = ["python"], version = "^0.29.1"}
mkdocs-material-extensions = "^1.3.1"
mkdocs-minify-plugin = "^0.8.0"

[tool.poetry.scripts]
inceptor = "inceptor.cli:cli"
inceptor-shell = "inceptor.cli:shell"

[tool.poetry.extras]
cli = [
    "click",
    "rich",
    "tabulate",
    "pyyaml",
    "python-dotenv",
    "python-multipart"
]
server = [
    "fastapi",
    "uvicorn"
]
visualization = [
    "matplotlib",
    "plotly",
    "graphviz"
]
export = [
    "jinja2",
    "markdown",
    "pandoc"
]
cloud = [
    "boto3",
    "azure-storage-blob",
    "google-cloud-storage"
]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "black",
    "flake8",
    "mypy",
    "isort",
    "pre-commit",
    "sphinx",
    "sphinx-rtd-theme",
    "mkdocs",
    "mkdocs-material"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313', 'py314']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["inceptor"]
known_third_party = ["click", "rich", "pydantic", "requests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --import-mode=importlib --strict-markers --strict-config --doctest-modules --cov=inceptor --cov-report=term-missing --cov-report=xml --cov-fail-under=80"
norecursedirs = [".git", ".tox", ".mypy_cache", ".pytest_cache", "__pycache__", "build", "dist"]
filterwarnings = ["error", "ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (black handles this)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S105,S106",
]



# Additional project metadata
[tool.poetry.urls]
"Bug Tracker" = "https://github.com/wronai/inceptor/issues"
"Changelog" = "https://github.com/wronai/inceptor/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/wronai/inceptor/discussions"
"Documentation" = "https://wronai.github.io/inceptor"

# Custom build configuration
[tool.poetry.build]
generate-setup-file = false